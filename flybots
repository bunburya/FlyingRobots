#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from sys import version_info
if version_info.minor < 2:
    from compat import ArgumentParser
else:
    from argparse import ArgumentParser
from curses import wrapper

from flying_robots import ui
from flying_robots.config import get_config, apply_opts_to_conf, validate_conf

parser = ArgumentParser()
parser.add_argument('-H', '--controls', dest='controls', action='store_true',
                    help='display game controls and exit')
parser.add_argument('-s', '--scores', dest='scores_only', action='store_true',
                    help='print high scores and exit')
parser.add_argument('-c', '--config', dest='conf_file',
                  help='provide a custom configuration file', metavar='FILE')
parser.add_argument('-l', '--level', dest='start_level',
                  help='start playing at the specified level', metavar='LEVEL')
parser.add_argument('-n', '--name', dest='name',
                  help='specify player name', metavar='NAME')
parser.add_argument('-x', dest='x', help='specify length on x-axis of grid',
                    metavar='N')
parser.add_argument('-y', dest='y', help='specify length on y-axis of grid',
                    metavar='N')
parser.add_argument('-z', dest='z', help='specify length on z-axis of grid',
                    metavar='N')

options = parser.parse_args()
if options.controls:
    print("""CONTROLS

Basic movement buttons are:

y k u
 \|/
h-x-l
 /|\
b j n

Holding shift while pressing any of the above also moves up the z-axis.
Holding ctrl while pressing any of the above also moves down the z-axis.

t = Teleport to random location.
w = Stay where you are and pass turns until you complete the level or die.
    You get a 10% bonus to score for each robot who dies in this period,
    but it only counts if you complete the level.
s = Toggle "sticky" mode, in which your view stays fixed on the current
    elevation even when you move. Sticky mode is indicated by the presence of
    an "s" at the bottom of the info pane.
f = Toggle "as-far-as-possible" mode. When you press a movement key while in
    this mode, you move as far as is safe in that direction. As-far-as-possible
    mode is indicated by the presence of a "f" at the bottom of the info pane.
    This mode is unset after each turn.
q = Quit.

Pg-up = View next level on z-axis, without moving.
Pg-dn = View previous level on z-axis, without moving.
p = View level on z-axis on which player is placed, without moving.
g = Prompt for number of level on z-axis and view that level, without moving.
""")
    exit(0)
if options.scores_only:
    from flying_robots.hs_handler import print_scores
    print_scores()

conf = get_config(options.conf_file)

# Each key in this dict is the name of the relevant attribute in the options
# object returned by parser.parse_args.
# Each value is a 3-tuple containing the name of the section in the config
# containing the option, the name of the option itself, and a boolean value
# indicating whether changing this option precludes the score from this game
# from being counted towards the high scores (True if it does).
optmap = {
    'name':         ('player', 'name', False),
    'start_level':  ('game', 'start_level', True),
    'x':            ('grid', 'x', True),
    'y':            ('grid', 'y', True),
    'z':            ('grid', 'z', True)
    }

apply_opts_to_conf(conf, options, optmap)
validate_conf(conf)
wrapper(lambda s: ui.GameInterface(s, conf))
